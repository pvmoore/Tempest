
<row value constructor> ::=
                <row value constructor element>
              | <left paren> <row value constructor list> <right paren>
              | <row subquery>

<row value constructor list> ::=
              <row value constructor element> [ { <comma> <row value constructor element> }... ]

<row value constructor element> ::=
                <value expression>
              | <null specification>
              | <default specification>

<null specification> ::=
              NULL

<default specification> ::=
              DEFAULT

<table value constructor> ::=
              VALUES <table value constructor list>

<table value constructor list> ::=
              <row value constructor> [ { <comma> <row value constructor> }... ]

<table expression> ::=
              <from clause>
              [ <where clause> ]
              [ <group by clause> ]
              [ <having clause> ]

<from clause> ::= FROM <table reference> [ { <comma> <table reference> }... ]

<joined table> ::=
                <cross join>
              | <qualified join>
              | <left paren> <joined table> <right paren>

<cross join> ::=
              <table reference> CROSS JOIN <table reference>

<qualified join> ::=
              <table reference> [ NATURAL ] [ <join type> ] JOIN
                <table reference> [ <join specification> ]

<join specification> ::=
                <join condition>
              | <named columns join>

<join condition> ::= ON <search condition>

<named columns join> ::=
              USING <left paren> <join column list> <right paren>

<join type> ::=
                INNER
              | <outer join type> [ OUTER ]
              | UNION

<outer join type> ::=
                LEFT
              | RIGHT
              | FULL

<join column list> ::= <column name list>

<where clause> ::= WHERE <search condition>

<group by clause> ::=
              GROUP BY <grouping column reference list>

<grouping column reference list> ::=
              <grouping column reference> [ { <comma> <grouping column reference> }... ]


<grouping column reference> ::=
              <column reference> [ <collate clause> ]

<having clause> ::= HAVING <search condition>

<query specification> ::=
              SELECT [ <set quantifier> ] <select list> <table expression>

<select list> ::=
                <asterisk>
              | <select sublist> [ { <comma> <select sublist> }... ]

<select sublist> ::=
                <derived column>
              | <qualifier> <period> <asterisk>

<derived column> ::= <value expression> [ <as clause> ]

<as clause> ::= [ AS ] <column name>

<query expression> ::=
                <non-join query expression>
              | <joined table>

<non-join query expression> ::=
                <non-join query term>
              | <query expression> UNION  [ ALL ] [ <corresponding spec> ] <query term>

              | <query expression> EXCEPT [ ALL ] [ <corresponding spec> ] <query term>


<query term> ::=
                <non-join query term>
              | <joined table>

<non-join query term> ::=
                <non-join query primary>
              | <query term> INTERSECT [ ALL ] [ <corresponding spec> ] <query primary>


<query primary> ::=
                <non-join query primary>
              | <joined table>

<non-join query primary> ::=
                <simple table>
              | <left paren> <non-join query expression> <right paren>

<simple table> ::=
                <query specification>
              | <table value constructor>
              | <explicit table>

<explicit table> ::= TABLE <table name>

<corresponding spec> ::=
              CORRESPONDING [ BY <left paren> <corresponding column list> <right paren> ]


<corresponding column list> ::= <column name list>

<scalar subquery> ::= <subquery>

<row subquery> ::= <subquery>

<table subquery> ::= <subquery>

<subquery> ::= <left paren> <query expression> <right paren>

<predicate> ::=
                <comparison predicate>
              | <between predicate>
              | <in predicate>
              | <like predicate>
              | <null predicate>
              | <quantified comparison predicate>
              | <exists predicate>
              | <unique predicate>
              | <match predicate>
              | <overlaps predicate>

<comparison predicate> ::=
              <row value constructor> <comp op> <row value constructor>

<comp op> ::=
                <equals operator>
              | <not equals operator>
              | <less than operator>
              | <greater than operator>
              | <less than or equals operator>
              | <greater than or equals operator>

<between predicate> ::=
              <row value constructor> [ NOT ] BETWEEN
                <row value constructor> AND <row value constructor>

<in predicate> ::=
              <row value constructor>
                [ NOT ] IN <in predicate value>

<in predicate value> ::=
                <table subquery>
              | <left paren> <in value list> <right paren>

<in value list> ::=
              <value expression> { <comma> <value expression> }...

<like predicate> ::=
              <match value> [ NOT ] LIKE <pattern>
                [ ESCAPE <escape character> ]

<match value> ::= <character value expression>

<pattern> ::= <character value expression>

<escape character> ::= <character value expression>

<null predicate> ::= <row value constructor> IS [ NOT ] NULL

<quantified comparison predicate> ::=
              <row value constructor> <comp op> <quantifier> <table subquery>


<quantifier> ::= <all> | <some>

<all> ::= ALL

<some> ::= SOME | ANY

<exists predicate> ::= EXISTS <table subquery>

<unique predicate> ::= UNIQUE <table subquery>

<match predicate> ::=
              <row value constructor> MATCH [ UNIQUE ] [ PARTIAL | FULL ] <table subquery>

<overlaps predicate> ::=
              <row value constructor 1> OVERLAPS <row value constructor 2>

<row value constructor 1> ::= <row value constructor>

<row value constructor 2> ::= <row value constructor>

<search condition> ::=
                <boolean term>
              | <search condition> OR <boolean term>

<boolean term> ::=
                <boolean factor>
              | <boolean term> AND <boolean factor>

<boolean factor> ::=
              [ NOT ] <boolean test>

<boolean test> ::=
              <boolean primary> [ IS [ NOT ] <truth value> ]

<truth value> ::=
                TRUE
              | FALSE
              | UNKNOWN

<boolean primary> ::=
                <predicate>
              | <left paren> <search condition> <right paren>

<delete statement: positioned> ::=
              DELETE FROM <table name>
                WHERE CURRENT OF <cursor name>

<character string type> ::=
                CHARACTER [ <left paren> <length> <right paren> ]
              | CHAR [ <left paren> <length> <right paren> ]
              | CHARACTER VARYING <left paren> <length> <right paren>
              | CHAR VARYING <left paren> <length> <right paren>
              | VARCHAR <left paren> <length> <right paren>

<bit string type> ::=
                BIT [ <left paren> <length> <right paren> ]
              | BIT VARYING <left paren> <length> <right paren>

<numeric type> ::=
                <exact numeric type>
              | <approximate numeric type>

<exact numeric type> ::=
                NUMERIC [ <left paren> <precision> [ <comma> <scale> ] <right paren> ]
              | DECIMAL [ <left paren> <precision> [ <comma> <scale> ] <right paren> ]
              | DEC [ <left paren> <precision> [ <comma> <scale> ] <right paren> ]
              | INTEGER
              | INT
              | SMALLINT

<approximate numeric type> ::=
                FLOAT [ <left paren> <precision> <right paren> ]
              | REAL
              | DOUBLE PRECISION

<length> ::= <unsigned integer>

<precision> ::= <unsigned integer>

<scale> ::= <unsigned integer>

<datetime type> ::=
                DATE
              | TIME [ <left paren> <time precision> <right paren> ]
              [ WITH TIME ZONE ]
              | TIMESTAMP [ <left paren> <timestamp precision> <right paren> ]
              [ WITH TIME ZONE ]

<time precision> ::= <time fractional seconds precision>

<timestamp precision> ::= <time fractional seconds precision>

<time fractional seconds precision> ::= <unsigned integer>

<interval type> ::= INTERVAL <interval qualifier>

<value specification> ::=
                <literal>
              | <general value specification>

<unsigned value specification> ::=
                <unsigned literal>
              | <general value specification>

<general value specification> ::=
                <parameter specification>
              | <dynamic parameter specification>
              | <variable specification>
              | USER
              | CURRENT_USER
              | SESSION_USER
              | SYSTEM_USER
              | VALUE

<simple value specification> ::=
                <parameter name>
              | <embedded variable name>
              | <literal>

<target specification> ::=
                <parameter specification>
              | <variable specification>

<simple target specification> ::=
                <parameter name>
              | <embedded variable name>

<parameter specification> ::=
              <parameter name> [ <indicator parameter> ]

<indicator parameter> ::=
              [ INDICATOR ] <parameter name>

<dynamic parameter specification> ::= <question mark>

<variable specification> ::=
              <embedded variable name> [ <indicator variable> ]

<indicator variable> ::=
              [ INDICATOR ] <embedded variable name>

<table reference> ::=
                <table name> [ [ AS ] <correlation name>
                    [ <left paren> <derived column list> <right paren> ] ]
              | <derived table> [ AS ] <correlation name>
                    [ <left paren> <derived column list> <right paren> ]
              | <joined table>

<derived table> ::= <table subquery>

<derived column list> ::= <column name list>

<column name list> ::=
              <column name> [ { <comma> <column name> }... ]

<column reference> ::= [ <qualifier> <period> ] <column name>

<qualifier> ::=
                <table name>
              | <correlation name>

<set function specification> ::=
                COUNT <left paren> <asterisk> <right paren>
              | <general set function>

<general set function> ::=
                <set function type>
                    <left paren> [ <set quantifier> ] <value expression> <right paren>


<set function type> ::=
              AVG | MAX | MIN | SUM | COUNT

<set quantifier> ::= DISTINCT | ALL

<numeric value function> ::=
                <position expression>
              | <extract expression>
              | <length expression>

<position expression> ::=
              POSITION <left paren> <character value expression>
                  IN <character value expression> <right paren>

<length expression> ::=
                <char length expression>
              | <octet length expression>
              | <bit length expression>

<char length expression> ::=
              { CHAR_LENGTH | CHARACTER_LENGTH }
                  <left paren> <string value expression> <right paren>

<octet length expression> ::=
              OCTET_LENGTH <left paren> <string value expression> <right paren>


<bit length expression> ::=
              BIT_LENGTH <left paren> <string value expression> <right paren>


<extract expression> ::=
              EXTRACT <left paren> <extract field>
                  FROM <extract source> <right paren>

<extract field> ::=
                <datetime field>
              | <time zone field>

<time zone field> ::=
                TIMEZONE_HOUR
              | TIMEZONE_MINUTE

<extract source> ::=
                <datetime value expression>
              | <interval value expression>


<string value function> ::=
                <character value function>
              | <bit value function>

<character value function> ::=
                <character substring function>
              | <fold>
              | <form-of-use conversion>
              | <character translation>
              | <trim function>

<character substring function> ::=
              SUBSTRING <left paren> <character value expression> FROM <start position>

                          [ FOR <string length> ] <right paren>

<fold> ::= { UPPER | LOWER } <left paren> <character value expression> <right paren>


<form-of-use conversion> ::=
              CONVERT <left paren> <character value expression>
                  USING <form-of-use conversion name> <right paren>

<character translation> ::=
              TRANSLATE <left paren> <character value expression>
                  USING <translation name> <right paren>

<trim function> ::=
              TRIM <left paren> <trim operands> <right paren>

<trim operands> ::=
              [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source>


<trim source> ::= <character value expression>

<trim specification> ::=
                LEADING
              | TRAILING
              | BOTH

<trim character> ::= <character value expression>

<bit value function> ::=
              <bit substring function>

<bit substring function> ::=
              SUBSTRING <left paren> <bit value expression> FROM <start position>

                  [ FOR <string length> ] <right paren>

<start position> ::= <numeric value expression>

<string length> ::= <numeric value expression>

<datetime value function> ::=
                <current date value function>
              | <current time value function>
              | <current timestamp value function>

<current date value function> ::= CURRENT_DATE

<current time value function> ::=
                CURRENT_TIME [ <left paren> <time precision> <right paren> ]


<current timestamp value function> ::=
                CURRENT_TIMESTAMP [ <left paren> <timestamp precision> <right paren> ]


<case expression> ::=
                <case abbreviation>
              | <case specification>

<case abbreviation> ::=
                NULLIF <left paren> <value expression> <comma>
                      <value expression> <right paren>
              | COALESCE <left paren> <value expression>
                      { <comma> <value expression> }... <right paren>

<case specification> ::=
                <simple case>
              | <searched case>

<simple case> ::=
              CASE <case operand>
                <simple when clause>...
                [ <else clause> ]
              END

<searched case> ::=
              CASE
                <searched when clause>...
                [ <else clause> ]
              END

<simple when clause> ::= WHEN <when operand> THEN <result>

<searched when clause> ::= WHEN <search condition> THEN <result>

<else clause> ::= ELSE <result>

<case operand> ::= <value expression>

<when operand> ::= <value expression>

<result> ::= <result expression> | NULL

<result expression> ::= <value expression>

<cast specification> ::=
              CAST <left paren> <cast operand> AS <cast target> <right paren>

<cast operand> ::=
                <value expression>
              | NULL

<cast target> ::=
                <domain name>
              | <data type>

<value expression> ::=
                <numeric value expression>
              | <string value expression>
              | <datetime value expression>
              | <interval value expression>

<value expression primary> ::=
                <unsigned value specification>
              | <column reference>
              | <set function specification>
              | <scalar subquery>
              | <case expression>
              | <left paren> <value expression> <right paren>
              | <cast specification>

<numeric value expression> ::=
                <term>
              | <numeric value expression> <plus sign> <term>
              | <numeric value expression> <minus sign> <term>

<term> ::=
                <factor>
              | <term> <asterisk> <factor>
              | <term> <solidus> <factor>

<factor> ::=
              [ <sign> ] <numeric primary>

<numeric primary> ::=
                <value expression primary>
              | <numeric value function>

<string value expression> ::=
                <character value expression>
              | <bit value expression>

<character value expression> ::=
                <concatenation>
              | <character factor>

<concatenation> ::=
              <character value expression> <concatenation operator>
              <character factor>

<character factor> ::=
              <character primary> [ <collate clause> ]

<character primary> ::=
                <value expression primary>
              | <string value function>

<bit value expression> ::=
                <bit concatenation>
              | <bit factor>

<bit concatenation> ::=
              <bit value expression> <concatenation operator> <bit factor>

<bit factor> ::= <bit primary>

<bit primary> ::=
                <value expression primary>
              | <string value function>

<datetime value expression> ::=
                <datetime term>
              | <interval value expression> <plus sign> <datetime term>
              | <datetime value expression> <plus sign> <interval term>
              | <datetime value expression> <minus sign> <interval term>

<datetime term> ::=
                <datetime factor>

<datetime factor> ::=
                <datetime primary> [ <time zone> ]

<datetime primary> ::=
                <value expression primary>
              | <datetime value function>

<time zone> ::=
              AT <time zone specifier>

<time zone specifier> ::=
                LOCAL
              | TIME ZONE <interval value expression>

<interval value expression> ::=
                <interval term>
              | <interval value expression 1> <plus sign> <interval term 1>

              | <interval value expression 1> <minus sign> <interval term 1>

              | <left paren> <datetime value expression> <minus sign>
                    <datetime term> <right paren> <interval qualifier>

<interval term> ::=
                <interval factor>
              | <interval term 2> <asterisk> <factor>
              | <interval term 2> <solidus> <factor>
              | <term> <asterisk> <interval factor>

<interval factor> ::=
              [ <sign> ] <interval primary>

<interval primary> ::=
                <value expression primary> [ <interval qualifier> ]

<interval value expression 1> ::= <interval value expression>

<interval term 1> ::= <interval term>

<interval term 2> ::= <interval term>

<reserved word> ::=
                ABSOLUTE | ACTION | ADD | ALL | ALLOCATE | ALTER | AND
              | ANY | ARE | AS | ASC
              | ASSERTION | AT | AUTHORIZATION | AVG
              | BEGIN | BETWEEN | BIT | BIT_LENGTH | BOTH | BY
              | CASCADE | CASCADED | CASE | CAST | CATALOG | CHAR | CHARACTER | CHAR_LENGTH
              | CHARACTER_LENGTH | CHECK | CLOSE | COALESCE | COLLATE | COLLATION

              | COLUMN | COMMIT | CONNECT | CONNECTION | CONSTRAINT
              | CONSTRAINTS | CONTINUE
              | CONVERT | CORRESPONDING | COUNT | CREATE | CROSS | CURRENT
              | CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP | CURRENT_USER | CURSOR
              | DATE | DAY | DEALLOCATE | DEC | DECIMAL | DECLARE | DEFAULT | DEFERRABLE

              | DEFERRED | DELETE | DESC | DESCRIBE | DESCRIPTOR | DIAGNOSTICS

              | DISCONNECT | DISTINCT | DOMAIN | DOUBLE | DROP
              | ELSE | END | END-EXEC | ESCAPE | EXCEPT | EXCEPTION
              | EXEC | EXECUTE | EXISTS
              | EXTERNAL | EXTRACT
              | FALSE | FETCH | FIRST | FLOAT | FOR | FOREIGN | FOUND | FROM | FULL

              | GET | GLOBAL | GO | GOTO | GRANT | GROUP
              | HAVING | HOUR
              | IDENTITY | IMMEDIATE | IN | INDICATOR | INITIALLY | INNER | INPUT

              | INSENSITIVE | INSERT | INT | INTEGER | INTERSECT | INTERVAL | INTO | IS

              | ISOLATION
              | JOIN
              | KEY
              | LANGUAGE | LAST | LEADING | LEFT | LEVEL | LIKE | LOCAL | LOWER

              | MATCH | MAX | MIN | MINUTE | MODULE | MONTH
              | NAMES | NATIONAL | NATURAL | NCHAR | NEXT | NO | NOT | NULL

              | NULLIF | NUMERIC
              | OCTET_LENGTH | OF | ON | ONLY | OPEN | OPTION | OR
              | ORDER | OUTER
              | OUTPUT | OVERLAPS

              | PAD | PARTIAL | POSITION | PRECISION | PREPARE | PRESERVE | PRIMARY

              | PRIOR | PRIVILEGES | PROCEDURE | PUBLIC
              | READ | REAL | REFERENCES | RELATIVE | RESTRICT | REVOKE | RIGHT

              | ROLLBACK | ROWS
              | SCHEMA | SCROLL | SECOND | SECTION | SELECT | SESSION | SESSION_USER | SET
              | SIZE | SMALLINT | SOME | SPACE | SQL | SQLCODE | SQLERROR | SQLSTATE

              | SUBSTRING | SUM | SYSTEM_USER
              | TABLE | TEMPORARY | THEN | TIME | TIMESTAMP | TIMEZONE_HOUR | TIMEZONE_MINUTE
              | TO | TRAILING | TRANSACTION | TRANSLATE | TRANSLATION | TRIM | TRUE

              | UNION | UNIQUE | UNKNOWN | UPDATE | UPPER | USAGE | USER | USING

              | VALUE | VALUES | VARCHAR | VARYING | VIEW
              | WHEN | WHENEVER | WHERE | WITH | WORK | WRITE
              | YEAR
              | ZONE

<privileges> ::=
                ALL PRIVILEGES
              | <action list>

<action list> ::= <action> [ { <comma> <action> }... ]


<action> ::=
                SELECT
              | DELETE
              | INSERT [ <left paren> <privilege column list> <right paren> ]

              | UPDATE [ <left paren> <privilege column list> <right paren> ]

              | REFERENCES [ <left paren> <privilege column list> <right paren> ]

              | USAGE

<privilege column list> ::= <column name list>

<grantee> ::=
                PUBLIC
              | <authorization identifier>

<referential constraint definition> ::=
              FOREIGN KEY <left paren> <referencing columns> <right paren>
                <references specification>

<references specification> ::=
              REFERENCES <referenced table and columns>
                [ MATCH <match type> ]
                [ <referential triggered action> ]

<match type> ::=
                FULL
              | PARTIAL

<referencing columns> ::=
              <reference column list>

<referenced table and columns> ::=
              <table name> [ <left paren> <reference column list> <right paren> ]


<reference column list> ::= <column name list>

<referential triggered action> ::=
                <update rule> [ <delete rule> ]
              | <delete rule> [ <update rule> ]

<update rule> ::= ON UPDATE <referential action>

<delete rule> ::= ON DELETE <referential action>

<referential action> ::=
                CASCADE
              | SET NULL
              | SET DEFAULT
              | NO ACTION

<update statement: positioned> ::=
              UPDATE <table name>
                SET <set clause list>
                  WHERE CURRENT OF <cursor name>

<set clause list> ::=
              <set clause> [ { <comma> <set clause> }... ]

<set clause> ::=
              <object column> <equals operator> <update source>

<update source> ::=
                <value expression>
              | <null specification>
              | DEFAULT

<object column> ::= <column name>

<update statement: searched> ::=
              UPDATE <table name>
                SET <set clause list>
                [ WHERE <search condition> ]

<temporary table declaration> ::=
              DECLARE LOCAL TEMPORARY TABLE <qualified local table name>
                <table element list>
                [ ON COMMIT { PRESERVE | DELETE } ROWS ]

<insert statement> ::=
              INSERT INTO <table name>
                <insert columns and source>

<insert columns and source> ::=
                [ <left paren> <insert column list> <right paren> ]
              <query expression>
              | DEFAULT VALUES

<insert column list> ::= <column name list>

<delete statement: searched> ::=
              DELETE FROM <table name>
                [ WHERE <search condition> ]

<get diagnostics statement> ::=
              GET DIAGNOSTICS <sql diagnostics information>

<sql diagnostics information> ::=
                <statement information>
              | <condition information>

<statement information> ::=
              <statement information item> [ { <comma> <statement information item> }... ]

<statement information item> ::=
              <simple target specification> <equals operator> <statement information item name>

<statement information item name> ::=
                NUMBER
              | MORE
              | COMMAND_FUNCTION
              | DYNAMIC_FUNCTION
              | ROW_COUNT

<condition information> ::=
              EXCEPTION <condition number>
                <condition information item> [ { <comma> <condition information item> }... ]

<condition information item> ::=
              <simple target specification> <equals operator> <condition information item name>


<condition information item name> ::=
                CONDITION_NUMBER
              | RETURNED_SQLSTATE
              | CLASS_ORIGIN
              | SUBCLASS_ORIGIN
              | SERVER_NAME
              | CONNECTION_NAME
              | CONSTRAINT_CATALOG
              | CONSTRAINT_SCHEMA
              | CONSTRAINT_NAME
              | CATALOG_NAME
              | SCHEMA_NAME
              | TABLE_NAME
              | COLUMN_NAME
              | CURSOR_NAME
              | MESSAGE_TEXT
              | MESSAGE_LENGTH
              | MESSAGE_OCTET_LENGTH

<condition number> ::= <simple value specification>

<describe statement> ::=
                <describe input statement>
              | <describe output statement>

<describe input statement> ::=
              DESCRIBE INPUT <SQL statement name> <using descriptor>

<describe output statement> ::=
              DESCRIBE [ OUTPUT ] <SQL statement name> <using descriptor>

